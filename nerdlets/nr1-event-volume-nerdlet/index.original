//Nerdlet to review all data in an account

import React from 'react';
import { PlatformStateContext, NrqlQuery, Spinner, Table, TableHeader, TableHeaderCell, TableRow, TableRowCell, Stack, StackItem, JsonChart, HeadingText, BlockText, Grid, GridItem, LineChart, NerdGraphQuery } from 'nr1';

// https://docs.newrelic.com/docs/new-relic-programmable-platform-introduction

export default class EventVolumeNerdlet extends React.Component {
  constructor(props){
    super(props);
    console.debug("Props", this); //eslint-disable-line
    this.accountId = 734056;
    this.state = {
      selectedEventType: null,
    };
  }
  
  _onClickTableHeaderCell(key, event, sortingData) {
    this.setState({ [key]: sortingData.nextSortingType });
  }
  
  render() {
    console.debug("State: ", this.state)
    const { selectedEventType } = this.state;
    const eventTimeseriesQuery = `FROM \`${selectedEventType}\` SELECT bytecountestimate() TIMESERIES`
    const eventTypeQuery = `SHOW eventTypes`
    
    return(
      <PlatformStateContext.Consumer>
        {(platformUrlState) => {
          console.debug(platformUrlState);
          const { duration } = platformUrlState.timeRange;
          const since = ` SINCE ${duration/60000} minutes ago`
          var eventVolumes = []
          return(
            <Grid class-name="primary-grid" spacingType={[Grid.SPACING_TYPE.NONE, Grid.SPACING_TYPE.NONE]}>
              <GridItem className="primary-content-container" columnSpan={12}>
                <Stack fullWidth directionType={Stack.DIRECTION_TYPE.HORIZONTAL} gapType={Stack.GAP_TYPE.LOOSE}>
                  <StackItem grow={true} className="row-spacing">
                  <HeadingText style={{marginLeft: '25px'}}>Event Types in this Account</HeadingText>
                    <NrqlQuery accountId={this.accountId} query={eventTypeQuery + since}>
                      {({loading, error, data}) => {
                        if (loading) return <Spinner />
                        if (error) return <BlockText>{error.message}</BlockText>
                        if (data) {
                          //console.debug('Event Types:', data[0].data[0].eventTypes)
                          return (
                            data[0].data[0].eventTypes.map((item, i) => {
                                return (
                                    <NrqlQuery key={i} accountId={this.accountId} query={`FROM \`${item}\` SELECT bytecountestimate() ` + since}>
                                        {({loading, error, data}) => {
                                            if (loading) return <Spinner />
                                            if (error) return <BlockText>{error.message}</BlockText>
                                            if (data) {
                                                //console.debug('Inner Query:', item, data[0].data[0].bytecountestimate)
                                                var eventVolume = {"eventType": item, "eventVolume": data[0].data[0].bytecountestimate}
                                                //eventVolumes.push(eventVolume)
                                                console.debug("eventVolume", eventVolume)
                                                return(null)
                                            }
                                        }}
                                    </NrqlQuery>
                                )
                              }
                            ));
                        }
                      }}
                    </NrqlQuery>
                  </StackItem>
                </Stack>
                { selectedEventType && <Stack fullWidth gapType={Stack.GAP_TYPE.LOOSE}>
                  {console.debug("Timeseries Event Type:", selectedEventType)}
                  <StackItem grow={true} className="row-spacing">
                    <HeadingText style={{marginLeft: '25px'}}>{selectedEventType} Volume Timeseries (bytes)</HeadingText>
                    <LineChart accountId={this.accountId} className="chart" query={eventTimeseriesQuery + since}/>
                  </StackItem>
                </Stack>
                }
              </GridItem>
            </Grid>
          );
        }}
      </PlatformStateContext.Consumer>
    );
  }
}
